% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compile.R
\name{simulate}
\alias{simulate}
\title{Simulate stock-and-flow model}
\usage{
simulate(
  sfm,
  format_code = TRUE,
  keep_nonnegative_flow = TRUE,
  keep_nonnegative_stock = FALSE,
  keep_unit = TRUE,
  verbose = FALSE,
  debug = FALSE,
  only_stocks = FALSE,
  ...
)
}
\arguments{
\item{sfm}{Stock-and-flow model, object of class sdbuildR_xmile.}

\item{format_code}{If TRUE, format the R script with the styler package; only works if language is set to "R" in sim_specs. Defaults to TRUE.}

\item{keep_nonnegative_flow}{If TRUE, keeps original non-negativity setting of flows. Defaults to TRUE.}

\item{keep_nonnegative_stock}{If TRUE, keeps original non-negativity setting of stocks Defaults to TRUE.}

\item{keep_unit}{If TRUE, keeps units of variables. Defaults to TRUE.}

\item{verbose}{If TRUE, update on progress. Defaults to FALSE.}

\item{debug}{If TRUE, print output for debugging. Defaults to FALSE.}

\item{only_stocks}{If TRUE, only save stocks. If FALSE, auxiliaries and flows are saved using a callback function. Only applies if language is set to "Julia" in sim_specs() and no delay functions are used. Defaults to FALSE.}

\item{...}{Optional arguments}
}
\value{
List with variables created in the simulation script
\describe{
\item{df}{Dataframe, timeseries of computed variables in the ODE}
\item{dt}{Numeric, the timestep}
\item{times}{Numeric, sequence of time values}
\item{ode_func}{Function, the ODE function}
\item{pars}{List, constant parameters (i.e. static Auxiliaries)}
\item{xstart}{Numeric, initial value of Stocks}
\item{...}{Other variables created in the simulation script.}
}
}
\description{
Simulate a stock-and-flow model with simulation specifications defined by \code{sim_specs()}. If not already run, the Julia environment will be set up with \code{sdbuildR_setup()}. If any problems are detected by \code{debugger()}, the model cannot be simulated.
}
\examples{
sfm = xmile("SIR")
sim = simulate(sfm)
plot(sfm)

sfm = xmile("logistic_model")
sim = simulate(sfm)
plot(sfm)

sfm = xmile("predator-prey")
sim = simulate(sfm)
plot(sfm)

}
